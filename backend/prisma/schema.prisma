generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                String                 @id @default(cuid())
  email             String                 @unique
  password          String
  name              String?
  commission        Float                  @default(0)
  timezone          String                 @default("UTC")
  subscriptionTier  SubscriptionTier       @default(FREE)
  activeAccountId   String?
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  strategies        Strategy[]
  trades            Trade[]
  accounts          Account[]
  marketPreferences UserMarketPreferences?
  importSessions    ImportSession[]

  @@index([activeAccountId])
  @@map("users")
}

model Account {
  id                String          @id @default(cuid())
  userId            String
  name              String
  accountType       AccountType     @default(DEMO)
  currency          String          @default("USD")
  creationDate      DateTime
  initialBalance    Float
  currentBalance    Float?
  maxDrawdown       Float?
  profitTarget      Float?
  dataInfoName      String?
  dataInfoPassword  String?
  dataInfoNotes     String?
  isActive          Boolean         @default(true)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  trades            Trade[]

  @@unique([userId, name])
  @@index([userId])
  @@index([userId, isActive])
  @@map("accounts")
}

model Strategy {
  id          String   @id @default(cuid())
  name        String
  description String?
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  trades      Trade[]

  @@unique([name, userId])
  @@map("strategies")
}

model Trade {
  id                String         @id @default(cuid())
  userId            String
  accountId         String
  strategyId        String?
  importSessionId   String?
  symbol            String
  market            String         @default("ES")
  direction         TradeDirection
  orderType         OrderType
  entryDate         DateTime
  entryPrice        Float
  quantity          Float
  exitDate          DateTime?
  exitPrice         Float?
  stopLoss          Float?
  takeProfit        Float?
  maxFavorablePrice Float?
  maxAdversePrice   Float?
  maxPotentialProfit Float?        // Maximum profit price reached before reversal
  maxDrawdown        Float?        // Maximum drawdown before going to profit
  breakEvenWorked    Boolean?      // Whether breakeven protected the trade
  timeframe         String?
  result            TradeResult?
  notes             String?
  imageUrl          String?
  pnl               Float?
  pnlPercentage     Float?
  commission        Float          @default(0)
  netPnl            Float?
  efficiency        Float?
  rMultiple         Float?
  source            TradeSource    @default(MANUAL)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  strategy          Strategy?      @relation(fields: [strategyId], references: [id])
  user              User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  account           Account        @relation(fields: [accountId], references: [id], onDelete: Cascade)
  importSession     ImportSession? @relation(fields: [importSessionId], references: [id], onDelete: SetNull)

  @@index([userId, entryDate])
  @@index([userId, symbol])
  @@index([userId, market])
  @@index([userId, strategyId])
  @@index([accountId])
  @@index([accountId, entryDate])
  @@index([importSessionId])
  @@map("trades")
}

model UserMarketPreferences {
  id                  String   @id @default(cuid())
  userId              String   @unique
  preferredMarkets    Json     @default("[]")
  defaultMarket       String   @default("ES")
  quickAccessMarkets  Json     @default("[\"ES\", \"NQ\"]")
  marketSettings      Json?
  accountSize         Float    @default(100000)
  riskPerTrade        Float    @default(1.0)
  commissionOverrides Json?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_market_preferences")
}

model ImportSession {
  id              String         @id @default(cuid())
  userId          String
  source          ImportSource
  status          ImportStatus   @default(PENDING)
  fileName        String?
  filePath        String?
  fileSize        Int?
  totalRows       Int            @default(0)
  processedRows   Int            @default(0)
  importedRows    Int            @default(0)
  skippedRows     Int            @default(0)
  errorRows       Int            @default(0)
  duplicateRows   Int            @default(0)
  errors          Json           @default("[]")
  warnings        Json           @default("[]")
  metadata        Json?
  startedAt       DateTime       @default(now())
  completedAt     DateTime?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  trades          Trade[]

  @@index([userId])
  @@index([userId, status])
  @@index([userId, source])
  @@map("import_sessions")
}

enum TradeDirection {
  LONG
  SHORT
}

enum OrderType {
  MARKET
  LIMIT
  STOP
}

enum TradeResult {
  WIN
  LOSS
  BREAKEVEN
}

enum SubscriptionTier {
  FREE
  TIER1
  TIER2
  ULTIMATE
}

enum AccountType {
  DEMO
  LIVE
}

enum TradeSource {
  MANUAL
  QUICK_LOGGER
  IMPORT
  API
  NT8_IMPORT
}

enum ImportStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  PARTIAL
}

enum ImportSource {
  NT8_CSV
  NT8_EXCEL
  MANUAL
  API
}
